package org.xtuml.bp.xtext.masl.ui.rename

import com.google.inject.Inject
import java.util.List
import org.eclipse.emf.ecore.EClass
import org.eclipse.xtext.naming.QualifiedName
import org.xtuml.bp.core.Attribute_c
import org.xtuml.bp.core.Component_c
import org.xtuml.bp.core.FunctionParameter_c
import org.xtuml.bp.core.Function_c
import org.xtuml.bp.core.InstanceStateMachine_c
import org.xtuml.bp.core.InterfaceReference_c
import org.xtuml.bp.core.ModelClass_c
import org.xtuml.bp.core.OperationParameter_c
import org.xtuml.bp.core.Operation_c
import org.xtuml.bp.core.Port_c
import org.xtuml.bp.core.ProvidedExecutableProperty_c
import org.xtuml.bp.core.ProvidedOperation_c
import org.xtuml.bp.core.Provision_c
import org.xtuml.bp.core.RequiredExecutableProperty_c
import org.xtuml.bp.core.RequiredOperation_c
import org.xtuml.bp.core.Requirement_c
import org.xtuml.bp.core.StateMachineEvent_c
import org.xtuml.bp.core.StateMachineState_c
import org.xtuml.bp.core.StateMachine_c
import org.xtuml.bp.core.UserDataType_c
import org.xtuml.bp.core.common.NonRootModelElement
import org.xtuml.bp.xtext.masl.masl.structure.StructurePackage
import org.xtuml.bp.xtext.masl.masl.types.TypesPackage
import org.xtuml.bp.core.InterfaceOperation_c
import org.xtuml.bp.core.ExecutableProperty_c
import org.xtuml.bp.core.PropertyParameter_c
import org.xtuml.bp.core.ClassAsSimpleParticipant_c
import org.xtuml.bp.core.Association_c
import org.xtuml.bp.core.ClassAsSimpleFormalizer_c
import org.xtuml.bp.core.SimpleAssociation_c
import org.xtuml.bp.core.ClassAsAssociatedOneSide_c
import org.xtuml.bp.core.ClassAsAssociatedOtherSide_c
import org.xtuml.bp.core.LinkedAssociation_c
import org.xtuml.bp.core.DataType_c
import org.xtuml.bp.core.StateMachineEventDataItem_c
import org.xtuml.bp.core.Transition_c
import org.xtuml.bp.core.StateEventMatrixEntry_c
import org.xtuml.bp.core.NewStateTransition_c
import org.xtuml.bp.core.SemEvent_c
import org.xtuml.bp.core.PackageableElement_c
import org.xtuml.bp.core.Package_c

class XtumlToMaslMapper {
	
	@Inject extension StructurePackage 
	@Inject extension TypesPackage

	public def List<EClass> getMaslEClasses(NonRootModelElement xtumlElement) {
		switch xtumlElement{
			Attribute_c:
				#[attributeDefinition]
			Component_c:
				#[domainDefinition]
			Function_c:
				#[domainServiceDeclaration]
			FunctionParameter_c:
				#[parameter]
			RequiredOperation_c:
				#[terminatorServiceDeclaration]
			ProvidedOperation_c:
				#[terminatorServiceDeclaration]
		    InterfaceOperation_c:
				#[terminatorServiceDeclaration]
		    PropertyParameter_c:
				#[parameter]
			ModelClass_c:
				#[objectDeclaration]
			Operation_c:
				#[objectServiceDeclaration]
			OperationParameter_c:
				#[parameter]
			Port_c:
				#[terminatorDefinition]
			StateMachineState_c:
				#[stateDeclaration]
			StateMachineEvent_c:
				#[eventDefinition]
		    StateMachineEventDataItem_c:
		        #[parameter]
			DataType_c:
				#[typeDeclaration]
			UserDataType_c:
				#[typeDeclaration]
		    ClassAsSimpleParticipant_c:
		        #[relationshipEnd]
		    ClassAsSimpleFormalizer_c:
		        #[relationshipEnd]
		    ClassAsAssociatedOneSide_c:
		        #[relationshipEnd]
		    ClassAsAssociatedOtherSide_c:
		        #[relationshipEnd]
			default:			
				#[]
		}
	} 
	
    public def List<QualifiedName> getMaslQualifiedNames(NonRootModelElement xtumlElement, String name) {
        switch xtumlElement {
            InterfaceOperation_c: {
                // for interface operations, navigate to get all the qualified names of all referring operations
                val ops = newArrayList
                ops += RequiredOperation_c.getManySPR_ROsOnR4502(RequiredExecutableProperty_c.getManySPR_REPsOnR4500(
                    ExecutableProperty_c.getOneC_EPOnR4004(xtumlElement))).map[ spr_ro |
                        getMaslQualifiedName(spr_ro, name)
                    ]
                ops += ProvidedOperation_c.getManySPR_POsOnR4503(ProvidedExecutableProperty_c.getManySPR_PEPsOnR4501(
                    ExecutableProperty_c.getOneC_EPOnR4004(xtumlElement))).map[ spr_po |
                        getMaslQualifiedName(spr_po, name)
                    ]
                ops.filter[ nonNull ].toList
            }
            PropertyParameter_c: {
                // for interface message parameters, navigate to get all the qualified names of
                // all referring messages and add the parameter name
                val params = newArrayList
                params += RequiredOperation_c.getManySPR_ROsOnR4502(RequiredExecutableProperty_c.getManySPR_REPsOnR4500(
                    ExecutableProperty_c.getOneC_EPOnR4006(xtumlElement))).map[ spr_ro |
                        spr_ro.maslQualifiedName?.append(name)
                    ]
                params += ProvidedOperation_c.getManySPR_POsOnR4503(ProvidedExecutableProperty_c.getManySPR_PEPsOnR4501(
                    ExecutableProperty_c.getOneC_EPOnR4006(xtumlElement))).map[ spr_po |
                        spr_po.maslQualifiedName?.append(name)
                    ]
                params.filter[ nonNull ].toList
            }
            StateMachineEventDataItem_c: {
                // for event parameters, we must get the qualified name of the event parameter and the state
                // parameters of every state this event causes a transition to
                val params = newArrayList
                params += StateMachineEvent_c.getOneSM_EVTOnR532(xtumlElement).maslQualifiedName?.append(name)
                params += StateMachineState_c.getManySM_STATEsOnR506(Transition_c.getManySM_TXNsOnR507(
                    NewStateTransition_c.getManySM_NSTXNsOnR504(StateEventMatrixEntry_c.getManySM_SEMEsOnR503(
                    SemEvent_c.getOneSM_SEVTOnR525(StateMachineEvent_c.getOneSM_EVTOnR532(xtumlElement)))))).map[ sm_state |
                        sm_state.maslQualifiedName?.append(name)    
                    ]
                params.filter[ nonNull ].toList
            }
            default:
                #[getMaslQualifiedName(xtumlElement, name)].filter[ nonNull ].toList
        }
	}

	public def QualifiedName getMaslQualifiedName(NonRootModelElement xtumlElement) {
		switch xtumlElement{
			Component_c:
				QualifiedName.create(xtumlElement.name)
			StateMachineEvent_c:
				xtumlElement.maslQualifiedNamePrefix?.append(xtumlElement.mning)
		    Association_c:
		        xtumlElement.maslQualifiedNamePrefix?.append("R" + xtumlElement.numb)
			default:			
				xtumlElement.maslQualifiedNamePrefix?.append(xtumlElement.name)
		}
	} 

    public def QualifiedName getMaslQualifiedName(NonRootModelElement xtumlElement, String name) {
        switch xtumlElement{
            Component_c:
	            QualifiedName.create(name)
	        default:
                xtumlElement.maslQualifiedNamePrefix?.append(name)
        }
	}

	private def QualifiedName getMaslQualifiedNamePrefix(NonRootModelElement xtumlElement) {
		switch xtumlElement{
			Attribute_c:
				ModelClass_c.getOneO_OBJOnR102(xtumlElement).maslQualifiedName
			Function_c:
				xtumlElement.component.maslQualifiedName
			FunctionParameter_c:
				Function_c.getOneS_SYNCOnR24(xtumlElement).maslQualifiedName
			RequiredOperation_c:
                Port_c.getOneC_POOnR4016(InterfaceReference_c.getOneC_IROnR4009(Requirement_c.getOneC_ROnR4500(
                    RequiredExecutableProperty_c.getOneSPR_REPOnR4502(xtumlElement))))
                    .maslQualifiedName
			ProvidedOperation_c:
                Port_c.getOneC_POOnR4016(InterfaceReference_c.getOneC_IROnR4009(Provision_c.getOneC_POnR4501(
                    ProvidedExecutableProperty_c.getOneSPR_PEPOnR4503(xtumlElement))))
                    .maslQualifiedName
			ModelClass_c:
				xtumlElement.component.maslQualifiedName
			Operation_c:
				ModelClass_c.getOneO_OBJOnR115(xtumlElement).maslQualifiedName
			OperationParameter_c:
				Operation_c.getOneO_TFROnR117(xtumlElement).maslQualifiedName
			Port_c:
				xtumlElement.component.maslQualifiedName
			StateMachineState_c:
				ModelClass_c.getOneO_OBJOnR518(InstanceStateMachine_c.getOneSM_ISMOnR517(StateMachine_c.getOneSM_SMOnR501(xtumlElement))).maslQualifiedName
			StateMachineEvent_c:
				ModelClass_c.getOneO_OBJOnR518(InstanceStateMachine_c.getOneSM_ISMOnR517(StateMachine_c.getOneSM_SMOnR502(xtumlElement))).maslQualifiedName
			DataType_c:
				xtumlElement.component.maslQualifiedName
			UserDataType_c:
				DataType_c.getOneS_DTOnR17(xtumlElement).maslQualifiedNamePrefix
		    Association_c:
		        xtumlElement.component.maslQualifiedName
		    ClassAsSimpleParticipant_c:
		        Association_c.getOneR_RELOnR206(SimpleAssociation_c.getOneR_SIMPOnR207(xtumlElement)).maslQualifiedName
		    ClassAsSimpleFormalizer_c:
		        Association_c.getOneR_RELOnR206(SimpleAssociation_c.getOneR_SIMPOnR208(xtumlElement)).maslQualifiedName
		    ClassAsAssociatedOneSide_c:
		        Association_c.getOneR_RELOnR206(LinkedAssociation_c.getOneR_ASSOCOnR209(xtumlElement)).maslQualifiedName
		    ClassAsAssociatedOtherSide_c:
		        Association_c.getOneR_RELOnR206(LinkedAssociation_c.getOneR_ASSOCOnR210(xtumlElement)).maslQualifiedName
			default:			
				null
		}
	}
	
	
	private def getComponent(NonRootModelElement xtumlElement) {
	    if ( null == xtumlElement )
	        return null
		var parent = xtumlElement.persistableComponent
		while (parent != null) {
			if(parent.rootModelElement instanceof Component_c)
				return parent.rootModelElement
			else 
				parent = parent.parent 
		}
		// element is not in a component
		if ( xtumlElement instanceof DataType_c ) {
            // Select all components in the parent package of the package where the type is found
            // in the MASL idiom, public types are in the "Shared" package which is a sibling of
            // the domain component
		    val components = Component_c.getManyC_CsOnR8001(PackageableElement_c.getManyPE_PEsOnR8000(
		        Package_c.getOneEP_PKGOnR8000(PackageableElement_c.getOnePE_PEOnR8001(Package_c.getOneEP_PKGOnR8000(
		        PackageableElement_c.getOnePE_PEOnR8001(xtumlElement))))))
		    if ( components.length == 1 )
		        return components.get(0)
		}
		return null
		
	}
	
	private def nonNull(Object obj) {
	    if ( obj != null ) return true
	    return false
	}
	
}
