-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("0849862c-76a0-4d0f-bb84-cf5aef617874",
	'Auto Reconciliation Specification',
	19,
	'GD_ARS',
	'PEI:true
Persistent:false
TRANSLATE_FOR_EXTERNAL_USE:FALSE',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("01e90c90-3e42-4325-9395-f04aa3dcdeec",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	'findConnector',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'select any model related by self->GD_ES[R29]->GD_EMS[R11]->
                                                          GD_MS[R11]->GD_MD[R9];
select one spec related by self->GD_ES[R30];
select many connectors related by  spec->GD_GE[R10]->GD_CON[R2];
for each connector in connectors
  select one ge related by connector->GD_GE[R2];
  if (ge.represents == OS::NULL_INSTANCE())
    ge.represents = CL::getInstanceFromOOA_ID(
  	                                   rootInst:ge.convertToInstance(),
  	                                   OOA_ID:ge.OOA_ID, 
  	                                   OOA_Type:ge.OOA_Type );
  end if;
  id = CL::getOOAId(from:ge.represents);
  if (id == param.connectorID)
    return ge.elementId;
  end if;
end for;
return OS::NULL_UNIQUE_ID();',
	1,
	'',
	"c02376d4-138e-44c1-8e19-e42d4e5bdff4");
INSERT INTO O_TPARM
	VALUES ("42d98f22-42d8-42d9-bcdb-0c595e38daa3",
	"01e90c90-3e42-4325-9395-f04aa3dcdeec",
	'connectorID',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("c02376d4-138e-44c1-8e19-e42d4e5bdff4",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	'Reconcile',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'// Get all the auto reconcile specifications. This PEI data is found in 
// bp.ui.graphics/plugin.xml
select many autoReconcileSpecs from instances of GD_ARS;

// we must run the shape creation specs first
// so that any newly created shapes can be processed
// next and have connectors created
for each autoReconcileSpec in autoReconcileSpecs
  select many models related by autoReconcileSpec->GD_MS[R33]->GD_MD[R9];  // GD_MD represents shapes
  for each model in models
    autoReconcileSpec.reconcileShapes( system_id:param.system_id, diagram_id:model.diagramId);
    autoReconcileSpec.createMissingConnectors( diagram_id:model.diagramId, system_id:param.system_id, removeElements:param.removeElements);    
  end for;
end for;

// now process all other specs
for each autoReconcileSpec in autoReconcileSpecs
  select many graphicalElements related by autoReconcileSpec->GD_ES[R29]->GD_GE[R10];  // GD_GE represents lines and connectors
  for each graphicalElement in graphicalElements
    autoReconcileSpec.reconcileConnectors( graphical_element_id:graphicalElement.elementId, system_id:param.system_id, removeElements:param.removeElements);
  end for;  
end for;


',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("965be58d-e2e1-4b02-a7a2-f2fddb250d11",
	"c02376d4-138e-44c1-8e19-e42d4e5bdff4",
	'system_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"02ec8ed2-c71a-443c-9187-bd506acbaaca",
	'');
INSERT INTO O_TPARM
	VALUES ("02ec8ed2-c71a-443c-9187-bd506acbaaca",
	"c02376d4-138e-44c1-8e19-e42d4e5bdff4",
	'removeElements',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("4c729f91-6772-4b29-b161-87a3a2b0430f",
	"c02376d4-138e-44c1-8e19-e42d4e5bdff4",
	'rootElements',
	"68dedb08-fd5a-420e-9ec7-e7985ad0c856",
	0,
	'[]',
	"965be58d-e2e1-4b02-a7a2-f2fddb250d11",
	'This is an array of all the NonRootModelElement root elements that need to be reconciled');
INSERT INTO S_DIM
	VALUES (0,
	0,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"4c729f91-6772-4b29-b161-87a3a2b0430f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	"77fedfa3-630d-4587-9649-956f04c39f1d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_DT_PROXY
	VALUES ("68dedb08-fd5a-420e-9ec7-e7985ad0c856",
	"00000000-0000-0000-0000-000000000000",
	'instance',
	'',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("bb127757-3046-42f0-8eaa-58bc50d7f658",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	'findShape',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'select any model related by self->GD_ES[R29]->GD_EMS[R11]->
                                                          GD_MS[R11]->GD_MD[R9];
select one spec related by self->GD_ES[R30];
select many shapes related by  spec->GD_GE[R10]->GD_SHP[R2];
for each shape in shapes
  select one ge related by shape->GD_GE[R2];
  if (ge.represents == OS::NULL_INSTANCE())
    ge.represents = CL::getInstanceFromOOA_ID(
  	                                   rootInst:ge.convertToInstance(),
  	                                   OOA_ID:ge.OOA_ID, 
  	                                   OOA_Type:ge.OOA_Type );
  end if;
  id = CL::getOOAId(from:ge.represents);
  if (id == param.shapeId)
    return ge.elementId;
  end if;
end for;
return OS::NULL_UNIQUE_ID();',
	1,
	'',
	"01e90c90-3e42-4325-9395-f04aa3dcdeec");
INSERT INTO O_TPARM
	VALUES ("4d74bdcf-fec2-4fe9-be56-75e7e582a41f",
	"bb127757-3046-42f0-8eaa-58bc50d7f658",
	'shapeId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("7c49d5b8-f700-44f4-8348-1fdcf662c1a5",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	'adjustPositionToConnect',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one modelSpec related by self->GD_MS[R33];
select one spec related by self->GD_ES[R29];
select one sourceSpec related by self->GD_ES[R30];
select one targetSpec related by self->GD_ES[R31];
select many elemSpecs related by modelSpec->GD_ES[R11];
select many models related by modelSpec->GD_MD[R9];

//create object instance otherGraphicalConnector of GD_GE;
for each model in models
   select any graphicalConnector related by model->GD_GE[R1] where selected.OOA_ID == param.connectorId;
   select any otherGraphicalConnector related by model->GD_GE[R1] where (selected.OOA_ID == param.otherConnectorId);

   if(not empty otherGraphicalConnector and not empty graphicalConnector) 

    select one connector related by graphicalConnector->GD_CON[R2];
    select one edge related by connector->DIM_ED[R20];
    select one otherConnector related by otherGraphicalConnector->GD_CON[R2];
    select one otherEdge related by otherConnector->DIM_ED[R20];
    select any segment related by connector->GD_LS[R6];
    select any otherSegment related by otherConnector->GD_LS[R6];
    select one segmentEnd related by segment->DIM_WAY[R22];
    select one segmentStart related by segment->DIM_WAY[R21];
    select one otherSegmentEnd related by otherSegment->DIM_WAY[R22];
    select one otherSegmentStart related by otherSegment->DIM_WAY[R21];
    select one otherGraphElem related by otherGraphicalConnector->DIM_GE[R23];
    select any existingAnchor related by otherGraphElem->DIM_CON[R311];

    if(empty existingAnchor and graphicalConnector.OOA_Type == OOAType::ImportedRequiredInterface )
        segmentEnd.positionX = otherSegmentEnd.positionX;
        segmentEnd.positionY = otherSegmentEnd.positionY;
        create object instance anchor of DIM_CON;
        // initialize the anchor''''s location
        anchor.positionX = otherSegmentEnd.positionX;
        anchor.positionY = otherSegmentEnd.positionY;
        // make the anchor the one at which the connector ends
        select one otherGraphElem related by otherGraphicalConnector->DIM_GE[R23];
        if(not empty otherGraphElem )
          relate anchor to  otherGraphElem across R311;
        end if;
        select one edge related by connector->DIM_ED[R20];
        relate edge to anchor across R321;
  
    else if(empty existingAnchor and graphicalConnector.OOA_Type == OOAType::Delegation )
        segmentEnd.positionX = otherSegmentStart.positionX;
        segmentEnd.positionY = otherSegmentStart.positionY;
        create object instance anchor of DIM_CON;
        // initialize the anchor''''s location
        anchor.positionX = otherSegmentEnd.positionX;
        anchor.positionY = otherSegmentEnd.positionY;
        // make the anchor the one at which the connector ends
        select one otherGraphElem related by otherGraphicalConnector->DIM_GE[R23];
        if(not empty otherGraphElem )
         relate anchor to  otherGraphElem across R311;
       end if;
       select one edge related by connector->DIM_ED[R20];
       relate edge to anchor across R321;
    end if;
    end if;
end if;
end for;',
	1,
	'',
	"bb127757-3046-42f0-8eaa-58bc50d7f658");
INSERT INTO O_TPARM
	VALUES ("f245eb89-4c4e-47a6-9a78-6ec44ade0c95",
	"7c49d5b8-f700-44f4-8348-1fdcf662c1a5",
	'connectorId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("002bf30f-1aae-4246-9dfd-a543f7ad82bd",
	"7c49d5b8-f700-44f4-8348-1fdcf662c1a5",
	'otherConnectorId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f245eb89-4c4e-47a6-9a78-6ec44ade0c95",
	'');
INSERT INTO O_TFR
	VALUES ("35593d44-4cf2-4d7a-ac20-1f39b82f20db",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	'reconcileShapes',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any model related by self->GD_MS[R33]->GD_MD[R9] where selected.diagramId==param.diagram_id;
// only check elements under the passed system
if (CL::isContainedInSystem(element:model.represents,
                                                     system_id:param.system_id))                                                     
  count = 0;
  //Get the count of shapes in the model (i.e the number of classes in the class Diagram)
  // This conditional expression is  here to assure we are only calling this for 
  // shapes. The operationReturn_Boolean_Param_Boolean_Uniqueid is not used for shapes.
  if ((self.operationReturn_Boolean_Param_Boolean_Uniqueid == ""))
    count = CL::numElements( from:model.represents,using:self.operationReturn_Int_Param_Void);
  end if;
  i=0;	 
  while (i<count)
  	elementID = CL::getElementID(from:model.represents,index:i, using:self.operationReturn_Uniqueid_Param_Int);
    graphicalElementExists = false;
    select many graphicalElements related by model->GD_GE[R1];
    for each graphicalElement in graphicalElements
      if(graphicalElement.OOA_ID == elementID)
        graphicalElementExists =true;
        break;
      end if;         
    end for;
    if(graphicalElementExists == false)
      //create the shape
      model.newShape(arsId:self.Id,shape:elementID);
      select one sourceSpec related by self->GD_ES[R30];
      select one newElement related by sourceSpec->GD_GE[R16];
      if (empty newElement)
        i = i + 1;
        continue;
      end if;
      //set the OOA_ID of the new GE created
      newElement.OOA_ID=elementID; 
      newElement.represents=CL::getInstanceFromOOA_ID(
                                      rootInst: model.represents,
                                      OOA_ID: newElement.OOA_ID, 
                                      OOA_Type: newElement.OOA_Type );
      unrelate sourceSpec from newElement across R16;
      //i=count;
    end if;
    i=i+1;
  end while;  
   
end if; ',
	1,
	'',
	"7c49d5b8-f700-44f4-8348-1fdcf662c1a5");
INSERT INTO O_TPARM
	VALUES ("f2156974-c155-4272-9b85-288b824e669f",
	"35593d44-4cf2-4d7a-ac20-1f39b82f20db",
	'system_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("f834fae9-343e-41d7-97f9-b24d1a813561",
	"35593d44-4cf2-4d7a-ac20-1f39b82f20db",
	'diagram_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f2156974-c155-4272-9b85-288b824e669f",
	'');
INSERT INTO O_TFR
	VALUES ("8ffad301-a127-4be7-a504-064da8b3f9dc",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	'reconcileConnectors',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any graphicalElement related by self->GD_ES[R29]->GD_GE[R10] where selected.elementId==param.graphical_element_id;
if (graphicalElement.represents == OS::NULL_INSTANCE())
  graphicalElement.represents = CL::getInstanceFromOOA_ID(
                                       rootInst:graphicalElement.convertToInstance(),
                                       OOA_ID:graphicalElement.OOA_ID,
                                       OOA_Type:graphicalElement.OOA_Type );
  if (graphicalElement.represents == OS::NULL_INSTANCE())
    // There is not model element to reconcile against.
    return;
  end if;
end if;

// only check elements under the passed system
if(CL::isContainedInSystem(element:graphicalElement.represents,
                                                     system_id:param.system_id))
  select one sourceSpec related by self->GD_ES[R30];
  select one targetSpec related by self->GD_ES[R31];

  // do not try to determine if connectors exist when the existsMethod is empty
  if(self.operationReturn_Boolean_Param_Boolean_Uniqueid != "")
    select many startCons related by graphicalElement->DIM_GE[R23]->
                            DIM_CON[R311]->DIM_ED[R320]->GD_CON[R20]->GD_GE[R2];
    select many endCons related by graphicalElement->DIM_GE[R23]->
                            DIM_CON[R311]->DIM_ED[R321]->GD_CON[R20]->GD_GE[R2];
    
    for each startCon in startCons
      select one startConSpec related by startCon->GD_ES[R10];
      if(startConSpec == targetSpec)
        if (startCon.represents == OS::NULL_INSTANCE())
          startCon.represents = CL::getInstanceFromOOA_ID(
  	                                   rootInst:startCon.convertToInstance(),
  	                                   OOA_ID:startCon.OOA_ID, 
  	                                   OOA_Type:startCon.OOA_Type );
  	         
        end if;
       
        //Removing Connectors
        if not CL::hasConnector(
                             element_id:CL::getOOAId(from:startCon.represents),
                             instance:graphicalElement.represents,
                             methodName:self.operationReturn_Boolean_Param_Boolean_Uniqueid,
                             elementTypesMatch:sourceSpec == targetSpec) and param.removeElements
          // if the connector is going to be disposed
          // and there are other connectors anchored
          // to it then re-anchor them connector to
          // the shape that this connector is anchored to
          select one anchor related by startCon->DIM_GE[R23]->DIM_ED[R301]
        								                        ->DIM_CON[R320];
          select many anchoredStartConnectors related by startCon->DIM_GE[R23]
						                          ->DIM_CON[R311]->DIM_ED[R320];
          select many anchoredEndConnectors related by startCon->DIM_GE[R23]
						                          ->DIM_CON[R311]->DIM_ED[R321];
          for each anchoredStartConnector in anchoredStartConnectors
            // only do this if it is supported
            select one autoCreateShapeSpec related by graphicalElement->GD_ES[R10];
            select one conSpec related by anchoredStartConnector->GD_CON[R20]
                                                        ->GD_GE[R2]->GD_ES[R10];
            select many startTerminals related by  conSpec->TS_CSP[R200]
                        ->TS_TSP[R202]->TS_SHT[R201]->TS_SSP[R204]->GD_ES[R200];
            allow = false;
            for each startTerm in startTerminals
              if(startTerm == autoCreateShapeSpec)
                allow = true;
              end if;
            end for;
            if(allow)
              select one oldAnchor related by anchoredStartConnector->DIM_CON[R320];
              unrelate anchoredStartConnector from oldAnchor across R320;
              relate anchoredStartConnector to anchor across R320;
            end if;
          end for;
          for each anchoredEndConnector in anchoredEndConnectors
            select one autoCreateShapeSpec related by graphicalElement->GD_ES[R10];
            select one conSpec related by anchoredStartConnector->GD_CON[R20]
                                                        ->GD_GE[R2]->GD_ES[R10];
            select many endTerminals related by  conSpec->TS_CSP[R200]
                        ->TS_TSP[R203]->TS_SHT[R201]->TS_SSP[R204]->GD_ES[R200];
            allow = false;
            for each endTerm in endTerminals
              if(endTerm == autoCreateShapeSpec)
                allow = true;
              end if;
            end for;
            if(allow)
              select one oldAnchor related by anchoredEndConnector->DIM_CON[R321];
              unrelate anchoredEndConnector from oldAnchor across R321;
              relate anchoredEndConnector to anchor across R321;
            end if;
          end for; // anchoredEndConnector in anchoredEndConnectors
          startCon.dispose();
        end if; // removing connector
      end if; // if(startConSpec == targetSpec)
    end for; // anchoredStartConnector in anchoredStartConnectors
    
    
    for each endCon in endCons
      select one endConSpec related by endCon->GD_ES[R10];
      if(endConSpec == targetSpec)
        if (endCon.represents == OS::NULL_INSTANCE())
          endCon.represents = CL::getInstanceFromOOA_ID(
  	                                   rootInst:endCon.convertToInstance(),
  	                                   OOA_ID:endCon.OOA_ID, 
  	                                   OOA_Type:endCon.OOA_Type );
        end if;
        if not CL::hasConnector(
                             element_id:CL::getOOAId(from:endCon.represents),
      	                     instance:graphicalElement.represents,
                             methodName:self.operationReturn_Boolean_Param_Boolean_Uniqueid,
                             elementTypesMatch:sourceSpec == targetSpec) and param.removeElements
          // if the connector is going to be disposed
          // and there are other connectors anchored
          // to it then re-anchor them connector to
          // the shape that this connector is anchored to
          select one anchor related by startCon->DIM_GE[R23]->DIM_ED[R301]
        								                        ->DIM_CON[R321];
          select many anchoredStartConnectors related by endCon->DIM_GE[R23]
						                          ->DIM_CON[R311]->DIM_ED[R320];
          select many anchoredEndConnectors related by endCon->DIM_GE[R23]
						                          ->DIM_CON[R311]->DIM_ED[R321];
          for each anchoredStartConnector in anchoredStartConnectors
            select one oldAnchor related by anchoredStartConnector->DIM_CON[R320];
            unrelate anchoredStartConnector from oldAnchor across R320;
            relate anchoredStartConnector to anchor across R320;
          end for;
          for each anchoredEndConnector in anchoredEndConnectors
            select one oldAnchor related by anchoredEndConnector->DIM_CON[R321];
            unrelate anchoredEndConnector from oldAnchor across R321;
            relate anchoredEndConnector to anchor across R321;
          end for;
          endCon.dispose();
        end if;
      end if; // if(endConSpec == targetSpec)
    end for; // for each endCon in endCons
  end if; //  if(self.operationReturn_Boolean_Param_Boolean_Uniqueid != "")

  // This will create connectors if missing  
  if(self.operationReturn_Uniqueid_Param_Boolean_Int != "")
    // reselect the connectors in case any were removed above
    select many startCons related by graphicalElement->DIM_GE[R23]->
                            DIM_CON[R311]->DIM_ED[R320]->GD_CON[R20]->GD_GE[R2];
    select many endCons related by graphicalElement->DIM_GE[R23]->
                            DIM_CON[R311]->DIM_ED[R321]->GD_CON[R20]->GD_GE[R2];
    count = CL::numConnectors( from:graphicalElement.represents,
                             elementTypesMatch:sourceSpec == targetSpec,
                             using:self.operationReturn_Int_Param_Void);
    // do not process if the element method == not used
    if (count > 0)
      i = 0;
      while (i < count)
        connectorId = CL::getConnectorID(from:graphicalElement.represents,
                          elementTypesMatch:sourceSpec == targetSpec,
                          index:i, using:self.operationReturn_Uniqueid_Param_Int);  	// TODO: This should not be operationReturn_Uniqueid_Param_Int, it should be operationReturn_Uniqueid_Param_Boolean_Int?
                          										// 		and if that is true, then this section can be wrapped to assure
                          										// it is only called when connectorMEthod is used.  The issue here is that
                          										// connectorMethid takes a boolean and operationReturn_Uniqueid_Param_Int does not
        foundMatchingStart = false;
        for each startCon in startCons
          if (startCon.represents == OS::NULL_INSTANCE())
            startCon.represents = CL::getInstanceFromOOA_ID(
  	                                   rootInst:startCon.convertToInstance(),
  	                                   OOA_ID:startCon.OOA_ID, 
  	                                   OOA_Type:startCon.OOA_Type );
          end if;
  	      if(CL::getOOAId(from:startCon.represents) == connectorId)
  	        foundMatchingStart = true;
            break;
    	  end if;
        end for; // startCon in startCons
  	    foundMatchingEnd = false;
  	    
  	    
        for each endCon in endCons
          if (endCon.represents == OS::NULL_INSTANCE())
            endCon.represents = CL::getInstanceFromOOA_ID(
  	                                   rootInst:endCon.convertToInstance(),
  	                                   OOA_ID:endCon.OOA_ID, 
  	                                   OOA_Type:endCon.OOA_Type );
          end if;
          if(CL::getOOAId(from:endCon.represents) == connectorId)
  	        foundMatchingEnd = true;
            break;
  	      end if;  	    
        end for; // endCon in endCons
        
        
  	    if(foundMatchingStart or foundMatchingEnd)
  	      // we do not need to worry as this element
          // already has a connector matching the given
          // id
          i = i + 1;
          continue;
        end if;
  	    
  	    templateConId = OS::NULL_UNIQUE_ID();
  	    if self.operationReturn_Uniqueid_Param_Boolean_Int != ""
  	      templateConId = CL::getConnectorID(from:graphicalElement.represents,
                   index:i, elementTypesMatch:sourceSpec == targetSpec,
                                              using:self.operationReturn_Uniqueid_Param_Boolean_Int);
  	    end if;
  	    if templateConId == OS::NULL_UNIQUE_ID()
  	      templateConId = connectorId;
  	    end if;
  	    conID = self.findConnector(connectorID:templateConId);
  	    if conID != OS::NULL_UNIQUE_ID()
    	  select one model related by graphicalElement->GD_MD[R1];
  	      model.newConnector(connector:conID,
                           elementId:graphicalElement.elementId, arsId:self.Id,
  	                                                  representsId:connectorId, existingGraphicsArePresent:true);
  	    end if;
        i = i + 1;
      end while; // (i < count)
        
    else // handle connector reconcile
      count = CL::numConnectors(from:graphicalElement.represents,
            elementTypesMatch:sourceSpec == targetSpec, using:self.operationReturn_Int_Param_Void);
      if count == 0
        select one con related by graphicalElement->DIM_GE[R23]->
                                                    DIM_ED[R301]->DIM_CON[R321];
        if not_empty con
          con.dispose();
        end if;
      end if;
    end if;
  end if; // if(self.operationReturn_Uniqueid_Param_Boolean_Int != "")
end if; // if (CL::isContainedInSystem(...
',
	1,
	'',
	"35593d44-4cf2-4d7a-ac20-1f39b82f20db");
INSERT INTO O_TPARM
	VALUES ("cd5179d3-74a4-498f-9076-7ef3c9076490",
	"8ffad301-a127-4be7-a504-064da8b3f9dc",
	'graphical_element_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("f2a2187f-d76f-4abf-836d-f623af6a8938",
	"8ffad301-a127-4be7-a504-064da8b3f9dc",
	'system_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"cd5179d3-74a4-498f-9076-7ef3c9076490",
	'');
INSERT INTO O_TPARM
	VALUES ("e6600053-2fd1-4ba5-ab9e-d7fe80a30ec5",
	"8ffad301-a127-4be7-a504-064da8b3f9dc",
	'removeElements',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"f2a2187f-d76f-4abf-836d-f623af6a8938",
	'');
INSERT INTO O_TFR
	VALUES ("2978d4fb-2c01-4a45-b1a3-76b3cea72ecb",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	'updateAllElements_obsolete',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'
//===============================================================================
//===============   Note: This was what Reconile() looked like in BOTH
//===============         Hend''s before and after cases   
//===============================================================================
//select many recSpecs from instances of GD_ARS;
//for each ars in recSpecs
//  ars.updateAllElements(system_id:param.system_id, removeElements:param.removeElements);
//end for;
//===============================================================================
//===============================================================================
select one modelSpec related by self->GD_MS[R33];
select one spec related by self->GD_ES[R29];
select one sourceSpec related by self->GD_ES[R30];
select one targetSpec related by self->GD_ES[R31];
// For sure its shape
if(not empty modelSpec)
  select many models related by modelSpec->GD_MD[R9];
  select many elemSpecs related by modelSpec->GD_ES[R11];
  for each model in models
    //Get the count of shapes in the model (i.e the number of classes in the class Diagram)
    count = 0;
    if ((self.operationReturn_Boolean_Param_Boolean_Uniqueid == ""))
      count = CL::numElements( from:model.represents,using:self.operationReturn_Int_Param_Void);
    end if;
    //select many graphicalConnectors related by model -> GD_GE[R1]->GD_CON[R2]->GD_GE[R2];
    i=0;
    while (i<count)
      select many graphicalElements related by model->GD_GE[R1];
      elementID = CL::getElementID(from:model.represents,index:i, using:self.operationReturn_Uniqueid_Param_Int);
      found = false;
      for each graphicalElement in graphicalElements
        if(graphicalElement.OOA_ID == elementID)
          found =true;
          break;
         end if;
      end for;
      if(found == false)
        //create the shape
        model.newShape(arsId:self.Id,shape:elementID);
        select one newElement related by sourceSpec->GD_GE[R16];
        //set the OOA_ID of the new GE created
        newElement.OOA_ID=elementID;
        newElement.represents=CL::getInstanceFromOOA_ID(
                                      rootInst: model.represents,
                                      OOA_ID: newElement.OOA_ID,
                                      OOA_Type: newElement.OOA_Type );
        unrelate sourceSpec from newElement across R16;

      end if;
      i=i+1;
    end while;
  end for;

  for each model in models
    select many autoCreateShapes related by model->GD_GE[R1];
      
    for each autoCreateShape in autoCreateShapes
      if (autoCreateShape.represents == OS::NULL_INSTANCE())
        autoCreateShape.represents = CL::getInstanceFromOOA_ID(
                                           rootInst:autoCreateShape.convertToInstance(),
                                           OOA_ID:autoCreateShape.OOA_ID,
                                           OOA_Type:autoCreateShape.OOA_Type );
      end if;

      if(not CL::isContainedInSystem(element:autoCreateShape.represents,
                                                     system_id:param.system_id))
        // only check elements under the passed system
        continue;
      end if;
      select many startCons related by autoCreateShape->DIM_GE[R23]->
                            DIM_CON[R311]->DIM_ED[R320]->GD_CON[R20]->GD_GE[R2];
      select many endCons related by autoCreateShape->DIM_GE[R23]->
                            DIM_CON[R311]->DIM_ED[R321]->GD_CON[R20]->GD_GE[R2];
      connectorCount = CL::numConnectors( from:autoCreateShape.represents,
                             elementTypesMatch:sourceSpec == targetSpec,
                             using:self.operationReturn_Int_Param_Void);
      j = 0;
      while (j < connectorCount)
        connectorId = CL::getConnectorID(from:autoCreateShape.represents,
                          elementTypesMatch:sourceSpec == targetSpec,
                          index:j, using:self.operationReturn_Uniqueid_Param_Int);
        templateConId = OS::NULL_UNIQUE_ID();
        if self.operationReturn_Uniqueid_Param_Boolean_Int != ""
          templateConId = CL::getConnectorID(from:autoCreateShape.represents,
                   index:j, elementTypesMatch:sourceSpec == targetSpec,
                                              using:self.operationReturn_Uniqueid_Param_Boolean_Int);
        end if;
        if templateConId == OS::NULL_UNIQUE_ID()
          templateConId = connectorId;
        end if;
        foundMatchingStart = false;
        for each startCon in startCons
          if(startCon.OOA_ID == connectorId)
            foundMatchingStart = true;
            break;
          end if;
        end for;
        foundMatchingEnd = false;

        for each endCon in endCons
          if(endCon.OOA_ID == connectorId)
            foundMatchingEnd = true;
            break;
          end if;
        end for;

        if(foundMatchingStart or foundMatchingEnd)
          // we do not need to worry as this element
          // already has a connector matching the given
          // id
          j = j + 1;
          continue;
        end if;

        if(not foundMatchingStart and not foundMatchingEnd )//and model.represents != autoCreateShape.represents)
          model.newConnector(connector:templateConId,
                           elementId:autoCreateShape.elementId, arsId:self.Id,
                                                          representsId:connectorId,
                                                          existingGraphicsArePresent:false);

          select one newConnector related by sourceSpec->GD_GE[R16];
          //set the OOA_ID of the new GE created
          newConnector.OOA_ID=connectorId;
          newConnector.represents=CL::getInstanceFromOOA_ID(
                                      rootInst: model.represents,
                                      OOA_ID: newConnector.OOA_ID,
                                      OOA_Type: newConnector.OOA_Type );

          unrelate sourceSpec from newConnector across R16;
        end if;
        j = j + 1;
      end while;
    end for; // for ARS in ARSs
  end for;  // for model in models
    
  select many models related by modelSpec->GD_MD[R9];
  for each model in models
    select many autoCreateShapes related by model->GD_GE[R1];
    for each autoCreateShape in autoCreateShapes
      if (autoCreateShape.represents == OS::NULL_INSTANCE())
                     autoCreateShape.represents = CL::getInstanceFromOOA_ID(
                                           rootInst:autoCreateShape.convertToInstance(),
                                           OOA_ID:autoCreateShape.OOA_ID,
                                           OOA_Type:autoCreateShape.OOA_Type );
      end if;

      connectorCount = CL::numConnectors(from:autoCreateShape.represents,
                    elementTypesMatch:sourceSpec == targetSpec, using:self.operationReturn_Int_Param_Void);
      x=0;
      while(x<connectorCount)
        connectorId = CL::getConnectorID(from:autoCreateShape.represents,
                          elementTypesMatch:sourceSpec == targetSpec,
                          index:x, using:self.operationReturn_Uniqueid_Param_Int);
        templateConId = OS::NULL_UNIQUE_ID();
        if self.operationReturn_Uniqueid_Param_Boolean_Int != ""
          templateConId = CL::getConnectorID(from:autoCreateShape.represents,
                   index:x, elementTypesMatch:sourceSpec == targetSpec,
                                                using:self.operationReturn_Uniqueid_Param_Boolean_Int);
        end if;
        if templateConId == OS::NULL_UNIQUE_ID()
          templateConId = connectorId;
        end if;
        select any graphicalConnector related by model->GD_GE[R1] where selected.OOA_ID == connectorId;
        if(not empty graphicalConnector)
          otherId= CL::getTheTargetConnectorId(rootInst: autoCreateShape.represents,
                                      OOA_ID: graphicalConnector.OOA_ID,
                                      OOA_Type: graphicalConnector.OOA_Type);
          if(otherId != OS::NULL_UNIQUE_ID())
            self.adjustPositionToConnect(connectorId: connectorId,otherConnectorId:otherId);
          end if;
        end if;
        x=x+1;
      end while;
    end for;
  end for;
end if; // end of "shape specific" section

if(not empty spec or not empty modelSpec)
  select many autoCreateShapes related by spec->GD_GE[R10];
  for each autoCreateShape in autoCreateShapes
    //If this autoCreateShape is Null instance
    if (autoCreateShape.represents == OS::NULL_INSTANCE())
      autoCreateShape.represents = CL::getInstanceFromOOA_ID(
                                           rootInst:autoCreateShape.convertToInstance(),
                                           OOA_ID:autoCreateShape.OOA_ID,
                                           OOA_Type:autoCreateShape.OOA_Type );
    end if;

    if(not CL::isContainedInSystem(element:autoCreateShape.represents,
                                                     system_id:param.system_id))
      // only check elements under the passed system
      continue;
    end if;

    select many startCons related by autoCreateShape->DIM_GE[R23]->
                            DIM_CON[R311]->DIM_ED[R320]->GD_CON[R20]->GD_GE[R2];
    select many endCons related by autoCreateShape->DIM_GE[R23]->
                            DIM_CON[R311]->DIM_ED[R321]->GD_CON[R20]->GD_GE[R2];
    for each startCon in startCons
      select one startConSpec related by startCon->GD_ES[R10];
      if(startConSpec == targetSpec)
        if (startCon.represents == OS::NULL_INSTANCE())
          startCon.represents = CL::getInstanceFromOOA_ID(
                                           rootInst:startCon.convertToInstance(),
                                           OOA_ID:startCon.OOA_ID,
                                           OOA_Type:startCon.OOA_Type );

        end if;

        //Removing Connectors
        if not CL::hasConnector(
                             element_id:CL::getOOAId(from:startCon.represents),
                             instance:autoCreateShape.represents,
                             methodName:self.operationReturn_Boolean_Param_Boolean_Uniqueid,
                             elementTypesMatch:sourceSpec == targetSpec) and param.removeElements 
          // if the connector is going to be disposed
          // and there are other connectors anchored
          // to it then re-anchor them connector to
          // the shape that this connector is anchored to
          select one anchor related by startCon->DIM_GE[R23]->DIM_ED[R301]->DIM_CON[R320];
          select many anchoredStartConnectors related by startCon->DIM_GE[R23]
                                                                          ->DIM_CON[R311]->DIM_ED[R320];
          select many anchoredEndConnectors related by startCon->DIM_GE[R23]
                                                                          ->DIM_CON[R311]->DIM_ED[R321];
          for each anchoredStartConnector in anchoredStartConnectors
            select one oldAnchor related by anchoredStartConnector->DIM_CON[R320];
            unrelate anchoredStartConnector from oldAnchor across R320;
            relate anchoredStartConnector to anchor across R320;
          end for;
          for each anchoredEndConnector in anchoredEndConnectors
            select one oldAnchor related by anchoredEndConnector->DIM_CON[R321];
            unrelate anchoredEndConnector from oldAnchor across R321;
            relate anchoredEndConnector to anchor across R321;
          end for;
          startCon.dispose();
        end if;
      end if;
    end for;

    for each endCon in endCons
      select one endConSpec related by endCon->GD_ES[R10];
      if(endConSpec == targetSpec)
        if (endCon.represents == OS::NULL_INSTANCE())
          endCon.represents = CL::getInstanceFromOOA_ID(
                                           rootInst:endCon.convertToInstance(),
                                           OOA_ID:endCon.OOA_ID,
                                           OOA_Type:endCon.OOA_Type );
        end if;
        if not CL::hasConnector(
                             element_id:CL::getOOAId(from:endCon.represents),
                             instance:autoCreateShape.represents,
                             methodName:self.operationReturn_Boolean_Param_Boolean_Uniqueid,
                             elementTypesMatch:sourceSpec == targetSpec) and param.removeElements
          // if the connector is going to be disposed
          // and there are other connectors anchored
          // to it then re-anchor them connector to
          // the shape that this connector is anchored to
          select one anchor related by startCon->DIM_GE[R23]->DIM_ED[R301]
                                                                                                ->DIM_CON[R321];
          select many anchoredStartConnectors related by endCon->DIM_GE[R23]
                                                                          ->DIM_CON[R311]->DIM_ED[R320];
          select many anchoredEndConnectors related by endCon->DIM_GE[R23]
                                                                          ->DIM_CON[R311]->DIM_ED[R321];
          for each anchoredStartConnector in anchoredStartConnectors
            select one oldAnchor related by anchoredStartConnector->DIM_CON[R320];
            unrelate anchoredStartConnector from oldAnchor across R320;
            relate anchoredStartConnector to anchor across R320;
          end for;
          for each anchoredEndConnector in anchoredEndConnectors
            select one oldAnchor related by anchoredEndConnector->DIM_CON[R321];
            unrelate anchoredEndConnector from oldAnchor across R321;
            relate anchoredEndConnector to anchor across R321;
          end for;
          endCon.dispose();
        end if;
      end if;
    end for; // endCon in EndCons

    // reselect the connectors in case any were removed above
    select many startCons related by autoCreateShape->DIM_GE[R23]->
                            DIM_CON[R311]->DIM_ED[R320]->GD_CON[R20]->GD_GE[R2];
    select many endCons related by autoCreateShape->DIM_GE[R23]->
                            DIM_CON[R311]->DIM_ED[R321]->GD_CON[R20]->GD_GE[R2];
    count = CL::numConnectors( from:autoCreateShape.represents,
                             elementTypesMatch:sourceSpec == targetSpec,
                             using:self.operationReturn_Int_Param_Void);
    if (count > 0)
      i = 0;
      while (i < count)
        connectorId = CL::getConnectorID(from:autoCreateShape.represents,
                          elementTypesMatch:sourceSpec == targetSpec,
                          index:i, using:self.operationReturn_Uniqueid_Param_Int);
        foundMatchingStart = false;
        for each startCon in startCons
          if (startCon.represents == OS::NULL_INSTANCE())
            startCon.represents = CL::getInstanceFromOOA_ID(
                                           rootInst:startCon.convertToInstance(),
                                           OOA_ID:startCon.OOA_ID,
                                           OOA_Type:startCon.OOA_Type );
          end if;
          if(CL::getOOAId(from:startCon.represents) == connectorId)
            foundMatchingStart = true;
            break;
          end if;
        end for;
        foundMatchingEnd = false;

        for each endCon in endCons
          if (endCon.represents == OS::NULL_INSTANCE())
            endCon.represents = CL::getInstanceFromOOA_ID(
                                           rootInst:endCon.convertToInstance(),
                                           OOA_ID:endCon.OOA_ID,
                                           OOA_Type:endCon.OOA_Type );
          end if;
          if(CL::getOOAId(from:endCon.represents) == connectorId)
            foundMatchingEnd = true;
            break;
          end if;
        end for;

        if(foundMatchingStart or foundMatchingEnd)
          // we do not need to worry as this element
          // already has a connector matching the given
          // id
          i = i + 1;
          continue;
        end if;

        templateConId = OS::NULL_UNIQUE_ID();
        if self.operationReturn_Uniqueid_Param_Boolean_Int != ""
          templateConId = CL::getConnectorID(from:autoCreateShape.represents,
                   index:i, elementTypesMatch:sourceSpec == targetSpec,
                   using:self.operationReturn_Uniqueid_Param_Boolean_Int);
        end if;
        if templateConId == OS::NULL_UNIQUE_ID()
          templateConId = connectorId;
        end if;
        conID = self.findConnector(connectorID:templateConId);
        if conID != OS::NULL_UNIQUE_ID()
          select one model related by autoCreateShape->GD_MD[R1];
          model.newConnector(connector:conID,
                           elementId:autoCreateShape.elementId, arsId:self.Id,
                                                          representsId:connectorId, existingGraphicsArePresent:true);
        end if;
        i = i + 1;
      end while;  // i < count
    else // handle connector reconcile
      count = CL::numConnectors(from:autoCreateShape.represents,
            elementTypesMatch:sourceSpec == targetSpec, using:self.operationReturn_Int_Param_Void);
      if count == 0
        // we only need worry about end connectors
        if not_empty endCons
          // Configuration if one side connector was dropped on the other
          select many cons related by autoCreateShape->DIM_GE[R23]->DIM_CON[R311];
          for each con in cons
            con.dispose();
          end for;
        else
          select one con related by autoCreateShape->DIM_GE[R23]->
                                                    DIM_ED[R301]->DIM_CON[R321];
          // Configuration if other side connector was dropped on the one
          if not_empty con
            con.dispose();
          end if;
        end if;
      end if;
    end if;
  end for; // select many many autoCreateShapes related by spec->GD_GE[R10];
end if;
if(not empty modelSpec)

end if;',
	1,
	'',
	"d4306342-68fd-418b-9c81-c7573bdd3a9b");
INSERT INTO O_TPARM
	VALUES ("89d34fd4-0163-4308-aebb-a63459e46be6",
	"2978d4fb-2c01-4a45-b1a3-76b3cea72ecb",
	'system_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("3b09220f-8c1b-4e66-acc7-08e1e5f38b55",
	"2978d4fb-2c01-4a45-b1a3-76b3cea72ecb",
	'removeElements',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"89d34fd4-0163-4308-aebb-a63459e46be6",
	'');
INSERT INTO O_TFR
	VALUES ("d4306342-68fd-418b-9c81-c7573bdd3a9b",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	'createMissingConnectors',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select any model related by self->GD_MS[R33]->GD_MD[R9] where selected.diagramId==param.diagram_id;
// only check elements under the passed system
if (self.operationReturn_Uniqueid_Param_Boolean_Int != "" and CL::isContainedInSystem(element:model.represents, system_id:param.system_id))
  select one sourceSpec related by self->GD_ES[R30];
  select one targetSpec related by self->GD_ES[R31];
  select many graphicalElements related by model->GD_GE[R1];
  for each graphicalElement in graphicalElements
    if (graphicalElement.represents == OS::NULL_INSTANCE())
      graphicalElement.represents = CL::getInstanceFromOOA_ID(
                                           rootInst:graphicalElement.convertToInstance(),
                                           OOA_ID:graphicalElement.OOA_ID,
                                           OOA_Type:graphicalElement.OOA_Type );
    end if;

    // only check elements under the passed system
    if( CL::isContainedInSystem(element:graphicalElement.represents, system_id:param.system_id))
      select many startCons related by graphicalElement->DIM_GE[R23]->
                            DIM_CON[R311]->DIM_ED[R320]->GD_CON[R20]->GD_GE[R2];
      select many endCons related by graphicalElement->DIM_GE[R23]->
                            DIM_CON[R311]->DIM_ED[R321]->GD_CON[R20]->GD_GE[R2];
      connectorCount = 0;
      select one elementSpec related by graphicalElement->GD_ES[R10];
    
      connectorCount = CL::numConnectors( from:graphicalElement.represents,
                             elementTypesMatch:sourceSpec == targetSpec,
                             using:self.operationReturn_Int_Param_Void);
      CL::traceOperation(message:"Processing GD_GE.diagramId: " + OS::uniqueIdToString(id:graphicalElement.diagramId) + 
     					"\nGD_GE.OOA_TYPE: " + OS::ooaTypeToString(id:graphicalElement.OOA_Type) +
     					"\nGD_GE.representsPath: " + graphicalElement.represents_path +
     					"\nARS.operationReturn_Int_Param_Void: " + self.operationReturn_Int_Param_Void + " was called on GD_GE.represents.getOOAId()=" + OS::uniqueIdToString(id:CL::getOOAId(from:graphicalElement.represents)) +
      					"\nGD_ES.toolCategory: " + elementSpec.toolCategory +
      					"\nGD_ARS.operationReturn_Uniqueid_Param_Int: " + self.operationReturn_Uniqueid_Param_Int +
      					"\nGD_ARS.operationReturn_Uniqueid_Param_Boolean_Int: " + self.operationReturn_Uniqueid_Param_Boolean_Int  +
      					"\nGD_ARS.operationReturn_Boolean_Param_Boolean_Uniqueid: " + self.operationReturn_Boolean_Param_Boolean_Uniqueid +
      					"\nNumberConnectors: " + OS::intToString(value:connectorCount)
      					);
      j = 0;
      while (j < connectorCount)
        connectorId = CL::getConnectorID(from:graphicalElement.represents,
                          elementTypesMatch:sourceSpec == targetSpec,
                          index:j, using:self.operationReturn_Uniqueid_Param_Int);
        templateConId = OS::NULL_UNIQUE_ID();
        if self.operationReturn_Uniqueid_Param_Boolean_Int != ""
          templateConId = CL::getConnectorID(from:graphicalElement.represents,
                   index:j, elementTypesMatch:sourceSpec == targetSpec,
                                              using:self.operationReturn_Uniqueid_Param_Boolean_Int);
        end if;
        if templateConId == OS::NULL_UNIQUE_ID()
          templateConId = connectorId;
        end if;
        foundMatchingStart = false;
        for each startCon in startCons
          if(startCon.OOA_ID == connectorId)
            foundMatchingStart = true;
            break;
          end if;
        end for;
        foundMatchingEnd = false;

        for each endCon in endCons
          if(endCon.OOA_ID == connectorId)
            foundMatchingEnd = true;
            break;
          end if;
        end for;

        if(foundMatchingStart or foundMatchingEnd)
          // we do not need to worry as this element
          // already has a connector matching the given
          // id
          j = j + 1;
          continue;
        end if;

        if(not foundMatchingStart and not foundMatchingEnd )//and model.represents != graphicalElement.represents)
          model.newConnector(connector:templateConId,
                           elementId:graphicalElement.elementId, arsId:self.Id,
                                                          representsId:connectorId,
                                                          existingGraphicsArePresent:false);

          select one newConnector related by sourceSpec->GD_GE[R16];
          //set the OOA_ID of the new GE created
          newConnector.OOA_ID=connectorId;
          newConnector.represents=CL::getInstanceFromOOA_ID(
                                      rootInst: model.represents,
                                      OOA_ID: newConnector.OOA_ID,
                                      OOA_Type: newConnector.OOA_Type );

          unrelate sourceSpec from newConnector across R16;
        end if;
        j = j + 1;
      end while; // (j < connectorCount)
    end if; // only check elements under the passed system   
  end for;  // for each graphicalElement in graphicalElements
end if;
CL::logTraceMsg(filterType:LoggerType::OPERATION, filterValue:"", message:"GD_ARS::createMissingConnectors() - returning");
',
	1,
	'',
	"8ffad301-a127-4be7-a504-064da8b3f9dc");
INSERT INTO O_TPARM
	VALUES ("1a45fe35-90f8-4600-a05b-b32b762cdc9f",
	"d4306342-68fd-418b-9c81-c7573bdd3a9b",
	'system_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("98161fbd-31ec-484b-aa5f-8e2cac6a9462",
	"d4306342-68fd-418b-9c81-c7573bdd3a9b",
	'removeElements',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"1a45fe35-90f8-4600-a05b-b32b762cdc9f",
	'');
INSERT INTO O_TPARM
	VALUES ("2aa8c06a-bfa6-4220-a916-61b5458c996a",
	"d4306342-68fd-418b-9c81-c7573bdd3a9b",
	'diagram_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"98161fbd-31ec-484b-aa5f-8e2cac6a9462",
	'');
INSERT INTO O_NBATTR
	VALUES ("e10da735-ac66-4d53-9464-ac3d84572c93",
	"0849862c-76a0-4d0f-bb84-cf5aef617874");
INSERT INTO O_BATTR
	VALUES ("e10da735-ac66-4d53-9464-ac3d84572c93",
	"0849862c-76a0-4d0f-bb84-cf5aef617874");
INSERT INTO O_ATTR
	VALUES ("e10da735-ac66-4d53-9464-ac3d84572c93",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	"1fe3629d-a75d-452f-be0e-d5025254f3c4",
	'operationReturn_Int_Param_Void',
	'',
	'',
	'operationReturn_Int_Param_Void',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("68ea2f93-55cb-4a7c-a507-cb897697c920",
	"0849862c-76a0-4d0f-bb84-cf5aef617874");
INSERT INTO O_BATTR
	VALUES ("68ea2f93-55cb-4a7c-a507-cb897697c920",
	"0849862c-76a0-4d0f-bb84-cf5aef617874");
INSERT INTO O_ATTR
	VALUES ("68ea2f93-55cb-4a7c-a507-cb897697c920",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	"e10da735-ac66-4d53-9464-ac3d84572c93",
	'operationReturn_Uniqueid_Param_Int',
	'',
	'',
	'operationReturn_Uniqueid_Param_Int',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_REF
	VALUES ("0849862c-76a0-4d0f-bb84-cf5aef617874",
	"76253415-b575-4583-9248-5d403cee7647",
	0,
	"6b3798a6-af64-46df-a88c-8db2cc520b9a",
	"e0546353-cd04-4daa-9198-96a6c96ea5b0",
	"bb396cc9-ae37-4d4f-8c44-01e70b1cedb3",
	"83b67341-3fc3-4966-a866-aaf92319425b",
	"c5efaf87-6181-43ab-bc53-54e527873d7f",
	"5c8e3955-a925-409e-aab5-610abd281b2f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Element Specification',
	'OOA_Type',
	'R29.''reconciles instance population associated with''');
INSERT INTO R_RGO_PROXY
	VALUES ("0849862c-76a0-4d0f-bb84-cf5aef617874",
	"e0546353-cd04-4daa-9198-96a6c96ea5b0",
	"bb396cc9-ae37-4d4f-8c44-01e70b1cedb3",
	'../Graphical Data.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("6b3798a6-af64-46df-a88c-8db2cc520b9a",
	"76253415-b575-4583-9248-5d403cee7647",
	0,
	"e0546353-cd04-4daa-9198-96a6c96ea5b0",
	"83b67341-3fc3-4966-a866-aaf92319425b",
	'../Graphical Data.xtuml');
INSERT INTO O_RATTR
	VALUES ("c5efaf87-6181-43ab-bc53-54e527873d7f",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	"6b3798a6-af64-46df-a88c-8db2cc520b9a",
	"76253415-b575-4583-9248-5d403cee7647",
	1,
	'OOA_Type');
INSERT INTO O_BATTR_PROXY
	VALUES ("6b3798a6-af64-46df-a88c-8db2cc520b9a",
	"76253415-b575-4583-9248-5d403cee7647",
	'../Element Specification/Element Specification.xtuml');
INSERT INTO O_ATTR
	VALUES ("c5efaf87-6181-43ab-bc53-54e527873d7f",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	"89037c25-7f61-48ca-9f18-935e9fbd4416",
	'Scan_Target_OOA_Type',
	'',
	'Scan_Target_',
	'OOA_Type',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1fe3629d-a75d-452f-be0e-d5025254f3c4",
	"0849862c-76a0-4d0f-bb84-cf5aef617874");
INSERT INTO O_BATTR
	VALUES ("1fe3629d-a75d-452f-be0e-d5025254f3c4",
	"0849862c-76a0-4d0f-bb84-cf5aef617874");
INSERT INTO O_ATTR
	VALUES ("1fe3629d-a75d-452f-be0e-d5025254f3c4",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	"00000000-0000-0000-0000-000000000000",
	'Id',
	'',
	'',
	'Id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("b573c171-3dcd-41ed-ae67-a9ac0543c13e",
	"0849862c-76a0-4d0f-bb84-cf5aef617874");
INSERT INTO O_BATTR
	VALUES ("b573c171-3dcd-41ed-ae67-a9ac0543c13e",
	"0849862c-76a0-4d0f-bb84-cf5aef617874");
INSERT INTO O_ATTR
	VALUES ("b573c171-3dcd-41ed-ae67-a9ac0543c13e",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	"68ea2f93-55cb-4a7c-a507-cb897697c920",
	'operationReturn_Boolean_Param_Boolean_Uniqueid',
	'',
	'',
	'operationReturn_Boolean_Param_Boolean_Uniqueid',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("89037c25-7f61-48ca-9f18-935e9fbd4416",
	"0849862c-76a0-4d0f-bb84-cf5aef617874");
INSERT INTO O_BATTR
	VALUES ("89037c25-7f61-48ca-9f18-935e9fbd4416",
	"0849862c-76a0-4d0f-bb84-cf5aef617874");
INSERT INTO O_ATTR
	VALUES ("89037c25-7f61-48ca-9f18-935e9fbd4416",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	"b573c171-3dcd-41ed-ae67-a9ac0543c13e",
	'operationReturn_Uniqueid_Param_Boolean_Int',
	'',
	'',
	'operationReturn_Uniqueid_Param_Boolean_Int',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_REF
	VALUES ("0849862c-76a0-4d0f-bb84-cf5aef617874",
	"76253415-b575-4583-9248-5d403cee7647",
	0,
	"6b3798a6-af64-46df-a88c-8db2cc520b9a",
	"93193641-db8b-4f52-b5f4-67c898b2dbf1",
	"bf014913-71f0-4c7f-89f1-1309a00aebe7",
	"be906854-f4b6-4241-9d38-f1c320c5fa0f",
	"50fa916a-c781-4eb7-9635-861e56583761",
	"08edc7ac-f584-429c-bd6e-349bbecb17d4",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Element Specification',
	'OOA_Type',
	'R30.''reconciles against instances of''');
INSERT INTO R_RGO_PROXY
	VALUES ("0849862c-76a0-4d0f-bb84-cf5aef617874",
	"93193641-db8b-4f52-b5f4-67c898b2dbf1",
	"bf014913-71f0-4c7f-89f1-1309a00aebe7",
	'../Graphical Data.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("6b3798a6-af64-46df-a88c-8db2cc520b9a",
	"76253415-b575-4583-9248-5d403cee7647",
	0,
	"93193641-db8b-4f52-b5f4-67c898b2dbf1",
	"be906854-f4b6-4241-9d38-f1c320c5fa0f",
	'../Graphical Data.xtuml');
INSERT INTO O_RATTR
	VALUES ("50fa916a-c781-4eb7-9635-861e56583761",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	"6b3798a6-af64-46df-a88c-8db2cc520b9a",
	"76253415-b575-4583-9248-5d403cee7647",
	1,
	'OOA_Type');
INSERT INTO O_ATTR
	VALUES ("50fa916a-c781-4eb7-9635-861e56583761",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	"200f22dc-01dc-4ba5-9862-8b144810ffad",
	'Source_OOA_Type',
	'',
	'Source_',
	'OOA_Type',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("0849862c-76a0-4d0f-bb84-cf5aef617874",
	"76253415-b575-4583-9248-5d403cee7647",
	0,
	"6b3798a6-af64-46df-a88c-8db2cc520b9a",
	"49109c60-6e67-416e-9029-17b9838a13bf",
	"788ecc3e-8624-496c-9cde-89b6edaa1d10",
	"a5d307ad-efc7-4d12-8bc6-dedba3c04cba",
	"200f22dc-01dc-4ba5-9862-8b144810ffad",
	"582b00f1-04ae-4aa4-87f9-ea662de44895",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Element Specification',
	'OOA_Type',
	'R31.''reconciles''');
INSERT INTO R_RGO_PROXY
	VALUES ("0849862c-76a0-4d0f-bb84-cf5aef617874",
	"49109c60-6e67-416e-9029-17b9838a13bf",
	"788ecc3e-8624-496c-9cde-89b6edaa1d10",
	'../Graphical Data.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("6b3798a6-af64-46df-a88c-8db2cc520b9a",
	"76253415-b575-4583-9248-5d403cee7647",
	0,
	"49109c60-6e67-416e-9029-17b9838a13bf",
	"a5d307ad-efc7-4d12-8bc6-dedba3c04cba",
	'../Graphical Data.xtuml');
INSERT INTO O_RATTR
	VALUES ("200f22dc-01dc-4ba5-9862-8b144810ffad",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	"6b3798a6-af64-46df-a88c-8db2cc520b9a",
	"76253415-b575-4583-9248-5d403cee7647",
	1,
	'OOA_Type');
INSERT INTO O_ATTR
	VALUES ("200f22dc-01dc-4ba5-9862-8b144810ffad",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	"c5efaf87-6181-43ab-bc53-54e527873d7f",
	'Target_OOA_Type',
	'',
	'Target_',
	'OOA_Type',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("0849862c-76a0-4d0f-bb84-cf5aef617874",
	"0cd14c97-c661-47b7-a063-cf7c345d1bdc",
	0,
	"af61b674-5c60-451f-8e71-4938504496fc",
	"e524f7e2-81e0-40fa-a788-37e7a47fe940",
	"8486f7c0-5485-43c4-bc52-77b4b366ab19",
	"57e397eb-3e61-4dd4-ae5e-0e954a7e545b",
	"13ec2593-a384-402e-bd5c-6c5142a2a485",
	"882df834-7ddf-4ed5-be46-d8f84ae89126",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Model Specification',
	'OOA_Type',
	'R33');
INSERT INTO R_RGO_PROXY
	VALUES ("0849862c-76a0-4d0f-bb84-cf5aef617874",
	"e524f7e2-81e0-40fa-a788-37e7a47fe940",
	"8486f7c0-5485-43c4-bc52-77b4b366ab19",
	'../Graphical Data.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("af61b674-5c60-451f-8e71-4938504496fc",
	"0cd14c97-c661-47b7-a063-cf7c345d1bdc",
	0,
	"e524f7e2-81e0-40fa-a788-37e7a47fe940",
	"57e397eb-3e61-4dd4-ae5e-0e954a7e545b",
	'../Graphical Data.xtuml');
INSERT INTO O_RATTR
	VALUES ("13ec2593-a384-402e-bd5c-6c5142a2a485",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	"af61b674-5c60-451f-8e71-4938504496fc",
	"0cd14c97-c661-47b7-a063-cf7c345d1bdc",
	1,
	'OOA_Type');
INSERT INTO O_BATTR_PROXY
	VALUES ("af61b674-5c60-451f-8e71-4938504496fc",
	"0cd14c97-c661-47b7-a063-cf7c345d1bdc",
	'../Model Specification/Model Specification.xtuml');
INSERT INTO O_ATTR
	VALUES ("13ec2593-a384-402e-bd5c-6c5142a2a485",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	"50fa916a-c781-4eb7-9635-861e56583761",
	'OOA_Type',
	'',
	'',
	'OOA_Type',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("0849862c-76a0-4d0f-bb84-cf5aef617874",
	"0cd14c97-c661-47b7-a063-cf7c345d1bdc",
	0,
	"ce107490-0989-42ef-8800-aeb9ee9f7644",
	"e524f7e2-81e0-40fa-a788-37e7a47fe940",
	"8486f7c0-5485-43c4-bc52-77b4b366ab19",
	"57e397eb-3e61-4dd4-ae5e-0e954a7e545b",
	"45f1b8ac-2115-4a50-9b6a-eacd460b724e",
	"7fc87d9d-9730-4eed-b094-b5793bae8a59",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Model Specification',
	'Model_Type',
	'R33');
INSERT INTO O_RTIDA_PROXY
	VALUES ("ce107490-0989-42ef-8800-aeb9ee9f7644",
	"0cd14c97-c661-47b7-a063-cf7c345d1bdc",
	0,
	"e524f7e2-81e0-40fa-a788-37e7a47fe940",
	"57e397eb-3e61-4dd4-ae5e-0e954a7e545b",
	'../Graphical Data.xtuml');
INSERT INTO O_RATTR
	VALUES ("45f1b8ac-2115-4a50-9b6a-eacd460b724e",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	"ce107490-0989-42ef-8800-aeb9ee9f7644",
	"0cd14c97-c661-47b7-a063-cf7c345d1bdc",
	1,
	'Model_Type');
INSERT INTO O_BATTR_PROXY
	VALUES ("ce107490-0989-42ef-8800-aeb9ee9f7644",
	"0cd14c97-c661-47b7-a063-cf7c345d1bdc",
	'../Model Specification/Model Specification.xtuml');
INSERT INTO O_ATTR
	VALUES ("45f1b8ac-2115-4a50-9b6a-eacd460b724e",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	"13ec2593-a384-402e-bd5c-6c5142a2a485",
	'Model_Type',
	'',
	'',
	'Model_Type',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("b9c00edc-e0d7-49e3-9991-40ab23edae49",
	"0849862c-76a0-4d0f-bb84-cf5aef617874");
INSERT INTO O_BATTR
	VALUES ("b9c00edc-e0d7-49e3-9991-40ab23edae49",
	"0849862c-76a0-4d0f-bb84-cf5aef617874");
INSERT INTO O_ATTR
	VALUES ("b9c00edc-e0d7-49e3-9991-40ab23edae49",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	"45f1b8ac-2115-4a50-9b6a-eacd460b724e",
	'reprocess',
	'',
	'',
	'reprocess',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"0849862c-76a0-4d0f-bb84-cf5aef617874");
INSERT INTO O_OIDA
	VALUES ("1fe3629d-a75d-452f-be0e-d5025254f3c4",
	"0849862c-76a0-4d0f-bb84-cf5aef617874",
	0,
	'Id');
INSERT INTO O_ID
	VALUES (1,
	"0849862c-76a0-4d0f-bb84-cf5aef617874");
INSERT INTO O_ID
	VALUES (2,
	"0849862c-76a0-4d0f-bb84-cf5aef617874");
INSERT INTO PE_PE
	VALUES ("0849862c-76a0-4d0f-bb84-cf5aef617874",
	1,
	"b5695748-80fc-47fb-b5c7-801b5f28b907",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("b5695748-80fc-47fb-b5c7-801b5f28b907",
	"00000000-0000-0000-0000-000000000000",
	"8f801c9a-cf2d-4ef4-b11a-51b8697e3ca8",
	'Graphical Data',
	'The GD (Graphics Domain) subsystem models the graphical elements for a BridgePoint model.
-------------------------------------------------------
Import:org.eclipse.swt.graphics.Color
Notify_Changes:true',
	1,
	'../Graphical Data.xtuml');
